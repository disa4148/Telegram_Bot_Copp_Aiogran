import bot
import asyncio
import re
import xlsxwriter
import logging
import navigation
import CreateExcelTable
import EmailSender


from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram import Bot, Dispatcher, types, filters
from aiogram.contrib.fsm_storage.memory import MemoryStorage #–•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π

dp = bot.dp

class UserState(StatesGroup):
    name = State()
    surname = State()
    email = State()
    number = State()
    age = State()
    category = State()
    user_status = State()

@dp.message_handler(commands=['reg']) #–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def user_register(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è")
    await UserState.name.set()

@dp.message_handler(state=UserState.name)
async def get_name(message: types.Message, state: FSMContext): #–ü–æ–ª—É—á–µ–Ω–∏–µ
    if (len(message.text)) >= 2:
        if (len(message.text)) < 20:
            if any(char.isdigit() for char in message.text):
                await message.answer("–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ü–∏—Ñ—Ä\n\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑")
            else:
                await state.update_data(name=message.text)  # –ó–∞–ø–∏—Å—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ name
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é")
                await UserState.surname.set()  # –ª–∏–±–æ –∂–µ UserState.adress.set()
        else:
            await message.answer("–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ\n\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑")
    else:
        await message.answer("–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ\n\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑")

@dp.message_handler(state=UserState.surname)
async def get_surname(message: types.Message, state: FSMContext): #–§-—Ü–∏—è —Ñ–∞–º–∏–ª–∏–∏
    if (len(message.text)) >= 2:
        if (len(message.text)) < 60:
            if any(char.isdigit() for char in message.text):
                await message.answer('–§–∞–º–∏–ª–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑')
            else:
                await state.update_data(surname=message.text) # –ó–∞–ø–∏—Å—å –∑–Ω–∞—á–µ–Ω–∏—è surname
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª. –ø–æ—á—Ç—ã")
                await UserState.email.set()

        else:
            await message.answer("–§–∞–º–∏–ª–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è\n\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑")
    else:
        await message.answer('–§–∞–º–∏–ª–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑')

@dp.message_handler(state=UserState.email)
async def get_number(message: types.Message, state: FSMContext):
    email_validate_pattern = r"^\S+@\S+\.\S+$"
    if bool(re.match(email_validate_pattern, message.text)) == True:
        await state.update_data(email=message.text) #–ó–∞–ø–∏—Å—å –∑–Ω–∞—á–µ–Ω–∏—è email
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        await UserState.category.set()
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

@dp.message_handler(state=UserState.category)
async def get_category(message: types.Message, state: FSMContext):
    pattern = re.match(r'^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$', message.text)

    if (bool(pattern)) == True:
        await state.update_data(number=message.text) #–ó–∞–ø–∏—Å—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ number
        keyboard_cat = types.InlineKeyboardMarkup(row_width=1)
        categories = {
            '–°—Ç—É–¥–µ–Ω—Ç—ã': '1',
            '–£—á–∞—â–∏–µ—Å—è –æ–±—â–µ–æ–±—Ä–∞–∑–æ–≤–µ—Ç–µ–ª—å–Ω—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–π 6-7 –∫–ª–∞—Å—Å—ã': '2',
            '–£—á–∞—â–∏–µ—Å—è –æ–±—â–µ–æ–±—Ä–∞–∑–æ–≤–µ—Ç–µ–ª—å–Ω—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–π 8-11 –∫–ª–∞—Å—Å—ã': '3',
            '–ü—Ä–µ–¥–ø–µ–Ω—Å–∏–æ–Ω–µ—Ä—ã': '4',
            '–í–∑—Ä–æ—Å–ª–æ–µ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ/–†–∞–±–æ—Ç–∞—é—â–∏–π': '5',
            '–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å': '6',
            '–í—Å–µ': '7'
        }
        for category, data in categories.items():
            keyboard_cat.add(types.InlineKeyboardButton(text=category, callback_data=data))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:", reply_markup=keyboard_cat)
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    #await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞:")


@dp.callback_query_handler(lambda c: c.data in ['1', '2', '3', '4', '5', '6', '7'], state=UserState.category)
async def process_category(callback_query: types.CallbackQuery, state: FSMContext):
    category = callback_query.data
    categories = {
        '1': '–°—Ç—É–¥–µ–Ω—Ç—ã',
        '2': '–£—á–∞—â–∏–µ—Å—è –æ–±—â–µ–æ–±—Ä–∞–∑–æ–≤–µ—Ç–µ–ª—å–Ω—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ 6-7 –∫–ª–∞—Å—Å—ã',
        '3': '–£—á–∞—â–∏–µ—Å—è –æ–±—â–µ–æ–±—Ä–∞–∑–æ–≤–µ—Ç–µ–ª—å–Ω—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ 8-11 –∫–ª–∞—Å—Å—ã',
        '4': '–ü—Ä–µ–¥–ø–µ–Ω—Å–∏–æ–Ω–µ—Ä—ã',
        '5': '–í–∑—Ä–æ—Å–ª–æ–µ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ/–†–∞–±–æ—Ç–∞—é—â–∏–π',
        '6': '–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å',
        '7': '–í—Å–µ'
    }

    await state.update_data(category=categories[callback_query.data]) #–ó–∞–ø–∏—Å—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ category
    await callback_query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é: {category}")
    await UserState.age.set()
    # –≤—ã–∑–æ–≤ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")

@dp.message_handler(state=UserState.age)
async def get_age(message: types.Message, state: FSMContext):
    builder = types.InlineKeyboardMarkup(inline_keyboard=True, row_width=2)
    builder.add(types.InlineKeyboardButton(text="–î–∞ ‚úÖ", callback_data='reg_confirm'))
    builder.add(types.InlineKeyboardButton(text="–ù–µ—Ç ‚ùå", callback_data='reg_deviation'))

    await state.update_data(age=message.text) #–ó–∞–ø–∏—Å—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ age
    data = await state.get_data()
    await message.answer(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø–æ–ª—è?  üí¨\n\n"
                         f"–ò–º—è: <b>{data['name']}</b>\n"
                         f"–§–∞–º–∏–ª–∏—è: <b>{data['surname']}</b>\n"
                         f"–≠–ª. –ø–æ—á—Ç–∞: <b>{data['email']}</b>\n"
                         f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>{data['number']}</b>\n"
                         f"–í–æ–∑—Ä–∞—Å—Ç: <b>{data['age']}</b>\n"
                         f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{data['category']}</b>",
                         parse_mode='html',
                         reply_markup=builder
                         )
    #await state.finish
    await UserState.user_status.set()

@dp.callback_query_handler(lambda c: c.data == 'reg_confirm' or c.data == 'reg_deviation', state=UserState.user_status)
async def process_callback_reg_confirm(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == 'reg_confirm':
        us = UserState()
        await state.update_data(user_status='authorized')
        await callback_query.message.answer('–í—Å–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ üëè \n\n–í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫—É—Ä—Å–∞–º–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã <b> /course </b>', parse_mode='html')
        data = await state.get_data()
        CreateExcelTable.InsertTable(data)
        await state.finish()

    elif callback_query.data == 'reg_deviation':
            await state.update_data(user_status='unauthorized')
            data = await state.get_data()
            await callback_query.message.answer('–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <b>"/reg"</b> –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥', parse_mode='html')
            await state.finish()
# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await dp.start_polling(bot)
try:
    if __name__ == "__main__":
        print('Bot is working!!!')
        asyncio.run(main())
except:
    print('–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç...')
